// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Proxy.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <time.h>
#include <curl/curl.h>
#define EST (-4)
#define TIMEOUT 10

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::Proxy;

class ProxyHandler : virtual public ProxyIf {
 public:
  ProxyHandler() {
    // Your initialization goes here
  }

  void ping() {
    // Your implementation goes here
      time_t rawtime;
      struct tm * ptm;
      time (&rawtime);
      ptm = gmtime ( &rawtime );
      puts ("Current time in Atlanta:");
      printf ("Atlanta, GA (U.S.) :  %2d:%02d\n", (ptm->tm_hour + EST) % 24, ptm->tm_min);
 
  }

  int32_t getURL(const std::string& url) {
      // Your implementation goes here
      std::cout << "Received request for url: " << url << std::endl;
      CURL* curl;
      CURLcode res = CURLE_OK;

      curl = curl_easy_init();
      if (curl)
      {
          curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
          curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);
          // curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, &ProxyHandler::curlWriter);
          res = curl_easy_perform(curl);
          if (res != CURLE_OK)
              fprintf(stderr, "curl_easy_perform() failed: %s\n", curl_easy_strerror(res));
          curl_easy_cleanup(curl); 
      }
      return res;
  }

 private:
    size_t curlWriter(void* buf, size_t size, size_t nmemb)
    {
        std::cout << "Received size: " << size << " nmemb: " << nmemb << std::endl;
        if(std::cout.write(static_cast<char*>(buf), size))
            return size * nmemb;
        return 0;
    }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<ProxyHandler> handler(new ProxyHandler());
  shared_ptr<TProcessor> processor(new ProxyProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

