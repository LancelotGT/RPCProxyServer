// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Proxy.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <time.h>
#define EST (-4)

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::Proxy;

class ProxyHandler : virtual public ProxyIf {
 public:
  ProxyHandler() {
      // Your initialization goes here
  }

  int32_t getCurrentTime() {
      // Your implementation goes here
      time_t rawtime;
      struct tm * ptm;
      time (&rawtime);
      ptm = gmtime ( &rawtime );
      puts ("Current time in Atlanta:");
      printf ("Atlanta, GA (U.S.) :  %2d:%02d\n", (ptm->tm_hour + EST) % 24, ptm->tm_min);
      return 0;
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<ProxyHandler> handler(new ProxyHandler());
  shared_ptr<TProcessor> processor(new ProxyProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

